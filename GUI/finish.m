% For use with Matlab
% Copyright (C) 2019 -- Jerome Mendes <jermendes@gmail.com> or <jermendes@isr.uc.pt>, Rui Araujo <rui@isr.uc.pt>
% Jerome Mendes, Francisco A. A. Souza, Ricardo Maia, and Rui Araujo. "Iterative learning of multiple univariate zero-order t-s fuzzy systems". IEEE 45th Annual Conference of the Industrial Electronics Society (IECON 2019), 2019.
% The "iMU-ZOTS toolbox" comes with ABSOLUTELY NO WARRANTY;
% In case of publication of any application of this method, please, cite the work:
% Jerome Mendes, Francisco A. A. Souza, Ricardo Maia, and Rui Araujo.
% Iterative learning of multiple univariate zero-order t-s fuzzy systems.
% In Proc. of the The IEEE 45th Annual Conference of the Industrial Electronics Society (IECON 2019), pages 3657â€“3662, Lisbon, Portugal, October 14-17 2019. IEEE.
% DOI: http://doi.org/10.1109/IECON.2019.8927224

function finish(varargin)
    %% Description
    % This function presents the final GUI, in which, the final results are
    % presented (error_train, error_test, n_rules_best), and also the plots of the
    % estimated output (for train and test datasets) and of the final
    % membership functions per variable
    %% Function inputs
    % error_train - error (NRMSE) for train dataset
    % error_test - error (NRMSE) for test dataset
    % x - Struct with all parameters of the neo-fuzzy
    % y_train - Estimated output variable for train dataset
    % data_ytrain - Train dataset of output variable
    % y_test - Estimated output variable for test dataset
    % data_ytest - Test dataset of output variable 
if nargin ~= 7
    return;
end

S.in{1,1} = varargin(1);
S.in{2,1} = varargin(2);
S.in{3,1} = varargin(3);
S.in{4,1} = varargin(4);
S.in{5,1} = varargin(5);
S.in{6,1} = varargin(6);
S.in{7,1} = varargin(7);
S.hint{1,1} = 'Training error.'; % error_train
S.hint{2,1} = 'Testing error.'; % error_test
S.hint{3,1} = 'Click to plot MF of all variables.'; % plot all
S.hint{4,1} = 'Click to plot MF of selected variable.'; % plot selected
S.hint{5,1} = 'Select variable to plot MF.'; % select variable
S.hint{6,1} = 'Click to plot train estimation.'; % plot y_train_est
S.hint{7,1} = 'Click to plot test estimation.'; % plot y_test_est

S.fh = figure('units','pixels',...
              'position',[560 200 400 493],...
              'menubar','none',...
              'name','iMU-ZOTS Toolbox',...
              'numbertitle','off',...
              'visible','off',...
              'resize','off');

S.hpCfg = uipanel(S.fh,'Title','Final Results:','FontSize',11,...
              'units','normalized',...
              'BackgroundColor',[.94 .94 .94],...
              'Position',[0.1 0.6 0.8 0.32],...
              'visible','on');

S.htxt1 = uicontrol(S.hpCfg,'Style','text', 'String','error_train',...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{1,1},...
              'Position',[0.15 0.62 0.27 0.13]);

S.htxt2 = uicontrol(S.hpCfg,'Style','text', 'String','error_test',...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{2,1},...
              'Position',[0.15 0.26 0.27 0.13]);
%{
S.htxt3 = uicontrol(S.hpCfg,'Style','text', 'String','     n_best',...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{3,1},...
              'Position',[0.15 0.2 0.27 0.13]);
%}          
S.edtErrTrain = uicontrol(S.hpCfg,'Style','edit','String',S.in{1,1},...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{1,1},...
              'Enable', 'inactive',...
              'Position',[0.43 0.24 0.32 0.15]);

S.edtErrTest = uicontrol(S.hpCfg,'Style','edit','String',S.in{2,1},...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{2,1},...
              'Enable', 'inactive',...
              'Position',[0.43 0.6 0.32 0.15]);
%{
S.edtNBest = uicontrol(S.hpCfg,'Style','edit','String',S.in{3,1},...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{3,1},...
              'Enable', 'inactive',...
              'Position',[0.43 0.21 0.32 0.13]);
%}
varSelField = '?';
if length(varargin{4}) > 1
    varSelField = '1';
end
S.edtVarSel = uicontrol(S.fh,'Style','edit','String',varSelField,...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{5,1},...
              'Position',[0.49 0.358 0.11 0.05]);

S.btnPlotAll = uicontrol(S.fh,'Style','push', 'String','Plot all MF''s x...',...
              'units','normalized',...
              'Fontsize',12,...
              'Position',[0.12 0.45 0.35 0.055],...
              'TooltipString', S.hint{3,1},...
              'callback',{@btnPlotAll_Callback,S});

S.btnPlotOne = uicontrol(S.fh,'Style','push', 'String','Plot MF of var:',...
              'units','normalized',...
              'Fontsize',12,...
              'Position',[0.12 0.355 0.35 0.055],...
              'TooltipString', S.hint{4,1},...
              'callback',{@btnPlotOne_Callback,S});

S.btnYTrain = uicontrol(S.fh,'Style','push', 'String','y_train_est',...
              'units','normalized',...
              'Fontsize',12,...
              'Position',[0.17 0.20 0.28 0.055],...
              'TooltipString', S.hint{6,1},...
              'callback',{@btnYTrain_Callback,S});

S.btnYTest = uicontrol(S.fh,'Style','push', 'String','y_test_est',...
              'units','normalized',...
              'Fontsize',12,...
              'Position',[0.52 0.20 0.28 0.055],...
              'TooltipString', S.hint{7,1},...
              'callback',{@btnYTest_Callback,S});

S.hbtnExit = uicontrol(S.fh,'Style','push', 'String','Exit',...
              'Fontsize',12,...
              'Position',[152 29 100 25.6],...
              'callback',{@btnExit_Callback,S});

set(S.fh,'Visible','on');
uiwait(S.fh);
if ishandle(S.fh)
    delete(S.fh)
end
return;

% --- Executes on button press in btnExit.
function [] = btnExit_Callback(varargin)
uiresume(varargin{1, 3}.fh);

% --- Executes on button press in btnPlotAll.
function btnPlotAll_Callback(varargin)
PlotMFs(varargin{1, 3}.in{3, 1}{1,1});

% --- Executes on button press in btnPlotOne.
function btnPlotOne_Callback(varargin)
CreateStruct.Interpreter = 'tex';
CreateStruct.WindowStyle = 'modal';
varStr = get(varargin{1, 3}.edtVarSel,'string');
if varStr == '?'
    msgbox('Not enough MF''s','Error','error',CreateStruct);
    return;
end
varDbl = str2double(varStr);
if isnan(varDbl) || varDbl > length(varargin{1, 3}.in{3, 1}{1,1})
    msgbox('Invalid value for MF','Error','error',CreateStruct);
    return;
end
PlotMFs(varargin{1, 3}.in{3, 1}{1,1}, [varDbl varDbl]);

% --- Executes on button press in btnYTrain.
function btnYTrain_Callback(varargin)
figure;
plot(varargin{1, 3}.in{4, 1}{1,1});
hold on;
plot(varargin{1, 3}.in{5, 1}{1,1});
legend('Estimated - train', 'Target');

% --- Executes on button press in btnYTest.
function btnYTest_Callback(varargin)
figure;
plot(varargin{1, 3}.in{6, 1}{1,1});
hold on;
plot(varargin{1, 3}.in{7, 1}{1,1});
legend('Estimated - test', 'Target');
