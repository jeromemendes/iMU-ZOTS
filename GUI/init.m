% For use with Matlab
% Copyright (C) 2019 -- Jerome Mendes <jermendes@gmail.com> or <jermendes@isr.uc.pt>, Rui Araujo <rui@isr.uc.pt>
% Jerome Mendes, Francisco A. A. Souza, Ricardo Maia, and Rui Araujo. "Iterative learning of multiple univariate zero-order t-s fuzzy systems". IEEE 45th Annual Conference of the Industrial Electronics Society (IECON 2019), 2019.
% The "iMU-ZOTS toolbox" comes with ABSOLUTELY NO WARRANTY;
% In case of publication of any application of this method, please, cite the work:
% Jerome Mendes, Francisco A. A. Souza, Ricardo Maia, and Rui Araujo.
% Iterative learning of multiple univariate zero-order t-s fuzzy systems.
% In Proc. of the The IEEE 45th Annual Conference of the Industrial Electronics Society (IECON 2019), pages 3657â€“3662, Lisbon, Portugal, October 14-17 2019. IEEE.
% DOI: http://doi.org/10.1109/IECON.2019.8927224

function result = init()
    %% Description
    % This function presents the inial GUI, in which, the main parameters
    % are configured, and the train and test datasets are defined.
 
% Default values
S.in{1,1} = '100';   % default value for lim_it
S.in{2,1} = '0.001'; % default value for epsilon
S.in{3,1} = '0.8';   % default value for M_th
S.in{4,1} = '10';    % default value for max_MFs
S.in{5,1} = 'housing_train.mat';
S.in{6,1} = 'housing_test.mat';
% Fields hints
S.hint{1,1} = 'Maximum number of learning interactions.'; % lim_it
S.hint{2,1} = 'Termination condition defined on Algorithm 2 Step 3.c.ii.'; % epsilon
S.hint{3,1} = ['The learning algorithm will run varying the fuzzy rules as defined by the user.', ...
               newline, 'On the paper is from 2 to 20 rules.']; % M_th
S.hint{4,1} = ['The learning algorithm will run varying the fuzzy rules as defined by the user.', ...
               newline, 'On the paper is from 2 to 20 rules.']; % max_MFs
S.hint{5,1} = 'Dataset for training: [x1 x2 ... xn y]'; % Train
S.hint{6,1} = 'Dataset for testing: [x1 x2 ... xn y]'; % Test

S.fh = figure('units','pixels',...
              'position',[560 200 400 493],...
              'menubar','none',...
              'name','iMU-ZOTS Toolbox',...
              'numbertitle','off',...
              'visible','off',...
              'resize','off');

S.hpCfg = uipanel(S.fh,'Title','Parameters Config:','FontSize',11,...
              'units','normalized',...
              'BackgroundColor',[.94 .94 .94],...
              'Position',[0.1 0.5 0.8 0.45],...
              'visible','on');

S.hpLoad = uipanel(S.fh,'Title','Load Dataset:','FontSize',11,...
              'units','normalized',...
              'Position',[0.1 0.15 0.8 0.3],...
              'visible','on');

S.htxt1 = uicontrol(S.hpCfg,'Style','text', 'String','  lim_it',...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{1,1},...
              'Position',[0.2 0.77 0.2 0.13]);

S.htxt2 = uicontrol(S.hpCfg,'Style','text', 'String','epsilon',...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{2,1},...
              'Position',[0.2 0.54 0.2 0.13]);

S.htxt3 = uicontrol(S.hpCfg,'Style','text', 'String','M_th',...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{3,1},...
              'Position',[0.215 0.3 0.2 0.13]);
          
S.htxt4 = uicontrol(S.hpCfg,'Style','text', 'String','maxMF',...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{4,1},...
              'Position',[0.18 0.07 0.20 0.13]);

S.htxt5 = uicontrol(S.hpLoad,'Style','text', 'String','Train',...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{5,1},...
              'Position',[0.06 0.64 0.13 0.13]);

S.htxt6 = uicontrol(S.hpLoad,'Style','text', 'String',' Test',...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{6,1},...
              'Position',[0.06 0.27 0.13 0.13]);

S.edtLimit = uicontrol(S.hpCfg,'Style','edit','String',S.in{1,1},...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{1,1},...
              'Position',[0.4 0.77 0.35 0.15]);

S.edtEpsilon = uicontrol(S.hpCfg,'Style','edit','String',S.in{2,1},...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{2,1},...
              'Position',[0.4 0.54 0.35 0.15]);

S.edtMth     = uicontrol(S.hpCfg,'Style','edit','String',S.in{3,1},...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{3,1},...
              'Position',[0.4 0.31 0.35 0.15]);

S.edtMaxMFs  = uicontrol(S.hpCfg,'Style','edit','String',S.in{4,1},...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{4,1},...
              'Position',[0.4 0.08 0.35 0.15]);

S.edtLoadTrain = uicontrol(S.hpLoad,'Style','edit','String',S.in{5,1},...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{5,1},...
              'Position',[0.2 0.61 0.48 0.18]);

S.edtLoadTest = uicontrol(S.hpLoad,'Style','edit','String',S.in{6,1},...
              'units','normalized',...
              'Fontsize',12,...
              'TooltipString', S.hint{6,1},...
              'Position',[0.2 0.23 0.48 0.18]);

S.cancel = uicontrol(S.fh,'Style','edit','String','true',...
              'visible','off');

S.hbtn = uicontrol('Style','push', 'String','Run',...
              'Fontsize',12,...
              'Position',[152 29 100 25.6],...
              'callback',{@btnRun_Callback,S});

S.btnLoadTrain = uicontrol(S.hpLoad,'Style','push', 'String','load...',...
              'units','normalized',...
              'Fontsize',12,...
              'Position',[0.695 0.61 0.22 0.18],...
              'TooltipString', 'Click to load train dataset',...
              'callback',{@btnLoadTrain_Callback,S});

S.btnLoadTest = uicontrol(S.hpLoad,'Style','push', 'String','load...',...
              'units','normalized',...
              'Fontsize',12,...
              'Position',[0.695 0.23 0.22 0.18],...
              'TooltipString', 'Click to load test dataset',...
              'callback',{@btnLoadTest_Callback,S});

set(S.fh,'Visible','on');
uiwait(S.fh);
if ishandle(S.fh)
    if strcmp(get(S.cancel,'string'), 'false')
        result.Limit = str2double(get(S.edtLimit,'string'));
        result.epsilon = str2double(get(S.edtEpsilon,'string'));
        result.M_th = str2double(get(S.edtMth,'string'));
        result.maxMF = str2double(get(S.edtMaxMFs,'string'));
        result.Train = importdata(get(S.edtLoadTrain,'string'));
        result.Test = importdata(get(S.edtLoadTest,'string'));
        result.cancelled = false;
    else
        result.cancelled = true;
    end
    delete(S.fh)
else
    result.Limit = '';
    result.epsilon = '';
    result.M_th = '';
    result.maxMFs = '';
    result.Extra = '';
    result.Train = '';
    result.Test = '';
    result.cancelled = true;
end
return;


% --- Executes on button press in btnRun.
function [] = btnRun_Callback(varargin)
if checkData(varargin{1,3})
    set(varargin{1, 3}.cancel,'string','false');
    uiresume(varargin{1, 3}.fh);
end


% --- Executes on button press in btnLoadTrain.
function btnLoadTrain_Callback(varargin)
[file,path] = uigetfile('*.mat');
if isequal(file,0)
    set(varargin{1, 3}.edtLoadTrain,'string','');
else
    set(varargin{1, 3}.edtLoadTrain,'string',fullfile(path,file));
end


% --- Executes on button press in btnLoadTest.
function btnLoadTest_Callback(varargin)
[file,path] = uigetfile('*.mat');
if isequal(file,0)
    set(varargin{1, 3}.edtLoadTest,'string','');
else
    set(varargin{1, 3}.edtLoadTest,'string',fullfile(path,file));
end

% check data consistency
function result = checkData(S)
result = false;
CreateStruct.Interpreter = 'tex';
CreateStruct.WindowStyle = 'modal';
Limit = str2double(get(S.edtLimit,'string'));
epsilon = str2double(get(S.edtEpsilon,'string'));
M_th = str2double(get(S.edtMth,'string'));
maxMFs = str2double(get(S.edtMaxMFs,'string'));
% check fields empty
if isnan(Limit) || isnan(epsilon) || isnan(M_th) || isnan(maxMFs) ||...
   isempty(S.edtLoadTrain.String) || isempty(S.edtLoadTest.String)
    msgbox('All fieds should be filled','Error','error',CreateStruct);
    return;
end
% check Limit consistency
if Limit < 1 || mod(Limit,1)~=0
    msgbox('{\bf lim\_it} should be an integer greater than 0','Error','error',CreateStruct);
    return;
end
% check epsilon consistency
if epsilon < 0
    msgbox('{\bf epsilon} should be greater than or equal 0','Error','error',CreateStruct);
    return;
end
% check M_th consistency
if M_th < 0 || M_th >1
    msgbox('{\bf M\_th} should be between 0 and 1','Error','error',CreateStruct);
    return;
end
% check maxMFs consistency
if maxMFs < 2 || maxMFs > 100
    msgbox('{\bf maxMFs} should be an integer between 2 and 100','Error','error',CreateStruct);
    return;
end
if ~exist(get(S.edtLoadTrain,'string'),'file')
    msgbox('{\bf Train file} should exists','Error','error',CreateStruct);
    return;
end
if ~exist(get(S.edtLoadTest,'string'),'file')
    msgbox('{\bf Test file} should exists','Error','error',CreateStruct);
    return;
end
result = true;
return;